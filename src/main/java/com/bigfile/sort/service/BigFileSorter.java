package com.bigfile.sort.service;

import java.io.IOException;

public interface BigFileSorter {

    /**
     * Метод для сортировки больших файлов (больше выделенного объема памяти). Используется алгоритм
     * ExternalSort, заключающийся в том, что большой фаил разбивается на меньшие по объему файлы, которые
     * сортируются независимо и затем выполняется объединение предварительно отсортированных файлов.
     * Размер файлов, на которые разбивается большой фаил, выбирается автоматически, в зависимости от доступного
     * объема памяти.
     *
     * @param path путь до файла, который подлежит сортировке, например: "resources/huge_file.txt"
     * @return путь до нового отсортированного файла, например: "resources/huge_file_sorted.txt"
     * @throws IOException if an I/O error occurs.
     */
    String sortBigFile(String path) throws IOException;

    /**
     * Метод для сортировки больших файлов (больше выделенного объема памяти). Используется алгоритм
     * ExternalSort, заключающийся в том, что большой фаил разбивается на меньшие по объему файлы, которые
     * сортируются независимо и затем выполняется объединение предварительно отсортированных файлов.
     * Размер файлов, на которые разбивается большой фаил, выбирается пользователем.
     *
     * @param path      путь до файла, который подлежит сортировке, например: "resources/huge_file.txt"
     * @param chunkSize Размер файлов в MB, на которые разбивается большой фаил.
     * @return путь до нового отсортированного файла, например: "resources/huge_file_sorted.txt"
     * @throws IOException if an I/O error occurs.
     */
    String sortBigFile(String path, long chunkSize) throws IOException;
}
